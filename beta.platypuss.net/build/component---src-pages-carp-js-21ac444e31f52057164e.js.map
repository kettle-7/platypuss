{"version":3,"file":"component---src-pages-carp-js-21ac444e31f52057164e.js","mappings":"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","sources":["webpack://platypuss-beta/./src/components/rgb.js","webpack://platypuss-beta/./src/pages/carp.js"],"sourcesContent":["/************************************************************************\n* Copyright 2021-2024 Moss Finder                                       *\n*                                                                       *\n* This program is free software: you can redistribute it and/or modify  *\n* it under the terms of the GNU General Public License as published by  *\n* the Free Software Foundation, either version 3 of the License, or     *\n* (at your option) any later version.                                   *\n*                                                                       *\n* This program is distributed in the hope that it will be useful,       *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n* GNU General Public License for more details.                          *\n*                                                                       *\n* You should have received a copy of the GNU General Public License     *\n* along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n************************************************************************/\n\n// Convert a hex string \"7600bc\" to a list of rgb values [118, 0, 188]\nfunction stringToRGB(hexString) {\n  let hex = parseInt(hexString, 16);\n  let convertedHex = [];\n  let finalHex = [];\n  for (let i = 0; i < 6; i++) {\n    convertedHex.unshift(hex % 16);\n    hex = (hex - (hex % 16)) / 16;\n  }\n  for (let i = 0; i < 6; i += 2) {\n    finalHex.push(convertedHex[i] * 16 + convertedHex[i+1]);\n  }\n  return finalHex;\n}\n\n// Convert a list of rgb values [118, 0, 188] into a hex string \"7600bc\"\nfunction RGBToString(RGB) {\n  let convertedString = [];\n  let finalString = \"\";\n  for (let i = 0; i < 3; i++) {\n    convertedString.push(Math.floor(((RGB[i] - RGB[i] % 16) / 16)).toString(16), Math.floor((RGB[i] % 16)).toString(16));\n  }\n  for (let i = 0; i < 6; i++) {\n      finalString += convertedString[i];\n  }\n  return finalString;\n}\n\n// Multiply a list of rgb values by a specific number\nfunction multiplyRGB(RGB, multiplier) {\n  let newRGB = [];\n  for (let i = 0; i < 3; i++) {\n    newRGB.push(RGB[i] * multiplier);\n  }\n  return newRGB;\n}\n\n// Update the custom theme settings to a specific color pallete\nexport default function updateCustomTheme(attemptHex, states) {\n  attemptHex = attemptHex.toLowerCase();\n  let darkColorFix = attemptHex;\n  for (let i = 0; i < 5; i++) {\n    if (darkColorFix[0] !== \"0\") break;\n    darkColorFix = darkColorFix.slice(1);\n  }\n\n  if (attemptHex.length !== 6 || parseInt(attemptHex, 16).toString(16) !== darkColorFix) return;\n\n  setTimeout(()=>{states.setThemeHex(attemptHex)}, 50);\n  localStorage.setItem(\"themeHex\", attemptHex);\n\n  let rgb = stringToRGB(attemptHex);\n\n  let colorScheme = 0;\n  for (let i = 0; i < 3; i++) colorScheme += rgb[i];\n\n  let primaryColor = \"#\" + attemptHex;\n  let secondaryColor = \"#\" + RGBToString(multiplyRGB(rgb, 0.75));\n  if (colorScheme > 382.5) {\n    document.body.style.setProperty('--foreground-level1', \"#000000\");\n    document.body.style.setProperty('--foreground-level2', \"#222222\");\n    document.body.style.setProperty('--accent', \"#b300ff\");\n  }\n  else {\n    document.body.style.setProperty('--foreground-level1', \"#ffffff\");\n    document.body.style.setProperty('--foreground-level2', \"#e0e0e0\");\n    document.body.style.setProperty('--accent', \"#c847ff\");\n  }\n\n  document.body.style.setProperty('--outgradient', primaryColor);\n  document.body.style.setProperty('--ingradient', primaryColor);\n  document.body.style.setProperty('--outgradientsmooth', \"linear-gradient(\" + primaryColor + \", \" + secondaryColor + \")\");\n  document.body.style.setProperty('--ingradientsmooth', \"linear-gradient(\" + secondaryColor + \", \" + primaryColor + \")\");\n  document.body.style.setProperty('--background-level1', \"#\" + RGBToString(multiplyRGB(rgb, 0.82189542485)));\n  document.body.style.setProperty('--background-level2', \"#\" + RGBToString(multiplyRGB(rgb, 0.85751633988)));\n  document.body.style.setProperty('--background-level3', \"#\" + RGBToString(multiplyRGB(rgb, 0.89313725491)));\n  document.body.style.setProperty('--background-level4', \"#\" + RGBToString(multiplyRGB(rgb, 0.92875816994)));\n  document.body.style.setProperty('--background-level5', \"#\" + RGBToString(multiplyRGB(rgb, 0.96437908497)));\n  document.body.style.setProperty('--background-level6', primaryColor);\n  document.body.style.setProperty('--grey', \"#888888\");\n}","/************************************************************************\n* Copyright 2021-2024 Ben Keppel, Moss Finder                           *\n*                                                                       *\n* This program is free software: you can redistribute it and/or modify  *\n* it under the terms of the GNU General Public License as published by  *\n* the Free Software Foundation, either version 3 of the License, or     *\n* (at your option) any later version.                                   *\n*                                                                       *\n* This program is distributed in the hope that it will be useful,       *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n* GNU General Public License for more details.                          *\n*                                                                       *\n* You should have received a copy of the GNU General Public License     *\n* along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n************************************************************************/\n\nimport updateCustomTheme from '../components/rgb';\nimport * as React from \"react\";\nimport \"./themery.scss\";\n\nconst emailRegexp = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/gi;\nvar browser = typeof window !== \"undefined\"; // check if we're running in a browser rather than the build environment\nvar pageUrl = browser ? new URL(window.location) : new URL(\"http://localhost:8000\"); // window is not defined in the testing environment so just assume localhost\nconst authUrl = \"https://platypuss.net\"; // this shouldn't need to change but just in case\nvar states = {}; // One global variable for storing React state objects so we can access them anywhere\nvar emailRef, passwordRef, confirmPasswordRef, usernameRef;\n\n// thanks bryc on stack overflow ^w^\nfunction hashPassword (str, seed = 20) { // hashes passwords somehow\n  let h1 = 0xdeadbeef ^ seed, // had to be something\n  h2 = 0x41c6ce57 ^ seed;\n  for (let i = 0, ch; i < str.length; i++) {\n      ch = str.charCodeAt(i);\n      // Math.imul multiplies without loss of precision\n      h1 = Math.imul(h1 ^ ch, 2654435761);\n      h2 = Math.imul(h2 ^ ch, 1597334677);\n  }\n  \n  h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n  h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n\n  return (h2>>>0).toString(16).padStart(8,0)+(h1>>>0).toString(16).padStart(8,0);\n};\n\nfunction doTheLoginThingy(createNewAccount) {\n  if (createNewAccount) {\n    if (passwordRef.current.value !== confirmPasswordRef.current.value) {\n      states.setActivePopover(<CreateAccountPopover error=\"Your passwords don't match\"/>);\n      return;\n    }\n    if (passwordRef.current.value.replace(/[\\n\\r\\t ]/g, \"\") === \"\") {\n      states.setActivePopover(<CreateAccountPopover error=\"Your password must be at least one character\"/>);\n      return;\n    }\n    if (usernameRef.current.value.replace(/[\\n\\r\\t ]/g, \"\") === \"\") {\n      states.setActivePopover(<CreateAccountPopover error=\"Your username must be at least one character\"/>);\n      return;\n    }\n  }\n  fetch(`${authUrl}/login`, { // send this data to the authentication server, accepting a json response\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'text/plain'\n    },\n    body: JSON.stringify({ // the information we send to the authentication server\n      createNew: createNewAccount,\n      server: \"example.com\", // can be anything so long as no platypuss server will actually be hosted there,\n      email: emailRef.current.value,\n      username: createNewAccount ? usernameRef.current.value : undefined,\n      password: hashPassword(passwordRef.current.value)\n    })\n    // we take the response and save the session token to the browser\n  }).then(response => response.json()).then(response => {\n    if (createNewAccount) {\n      if (response.alreadyExists) {\n        states.setActivePopover(<CreateAccountPopover error={<>There's already an account with that email address,\n          would you like to <a href=\"#\" onClick={() => states.setActivePopover(<SignInPopover/>)}>sign in</a> instead?</>}/>);\n        return;\n      }\n      states.setActivePopover(<Popover title=\"Check your emails!\">Thanks for joining us, \n        you should get <br/> an email in the next few minutes to <br/> confirm the new account.</Popover>);\n      return;\n    } else {\n      if (!response.alreadyExists) {\n        states.setActivePopover(<SignInPopover error={<>There's no account with that email address,\n          would you like to <a href=\"#\" onClick={() => states.setActivePopover(<CreateAccountPopover/>)}>create one</a>?</>}/>);\n        return;\n      }\n      if (!response.passwordMatches) {\n        states.setActivePopover(<SignInPopover error=\"Incorrect password for this account\"/>);\n        return;\n      }\n    }\n    localStorage.setItem(\"sessionID\", response.sessionID);\n    window.location = \"/chat\";\n  });\n}\n\nfunction PageHeader ({title, iconClickEvent, ...props}) {\n  let customThemeDisplayRef = React.useRef(null);\n  let customThemeEditRef = React.useRef(null);\n\n  React.useEffect(() => {\n    fetch(authUrl + \"/uinfo?id=\" + localStorage.getItem(\"sessionID\"))\n      .then(data => data.json())\n      .then(data => states.setAccountInformation(data))\n      .catch(() => { if (pageUrl.pathname === \"/chat\") window.location = \"/\" });\n  }, []);\n\n  return (<header {...props}>\n    <img className=\"avatar\" onClick={iconClickEvent ? iconClickEvent : () => {window.location = \"/\"}} style={{cursor: \"pointer\"}} src=\"/icons/icon-96x96.png\"/>\n    <h2 onClick={() => {window.location = \"/\"}} style={{cursor: \"pointer\"}}>\n        {title ? title : \"(Beta!) Platypuss\"}\n    </h2>\n    <div style={{flexGrow: 1}}></div>\n    <img className=\"avatar\" style={{cursor: \"pointer\"}} src={authUrl+states.accountInformation.avatar} onClick={() => {\n      states.setActivePopover(\n        <Popover title=\"Account Settings\">\n          <div id=\"profileBanner\">\n            <div className=\"avatar\" id=\"changeAvatarHoverButton\" onClick={() => {\n              let input = document.createElement('input');\n              input.type = \"file\";\n              input.multiple = false;\n              input.accept = \"image/*\";\n              input.onchange = async function (event) {\n                let file = event.target.files[0];\n                if (file.size >= 10000000) {\n                  states.setActivePopover(<Popover title=\"Woah, that's too big!\">\n                    We only allow avatar sizes up to 10MB, this is to save storage space on the server. Please choose a smaller image or resize it in an image editor.\n                  </Popover>);\n                  return;\n                }\n                let request = new XMLHttpRequest();\n                request.open(\"POST\", `${authUrl}/pfpUpload?id=${localStorage.getItem(\"sessionID\")}`);\n                request.onreadystatechange = () => {\n                  if (request.readyState === XMLHttpRequest.DONE && request.status) {\n                    window.location.reload();\n                  }\n                  else {\n                    console.log(request);\n                  }\n                };\n                request.upload.onprogress = (event) => {\n                  states.setAvatarProgress(event.loaded/event.total*100);\n                };\n                request.send(await file.bytes());\n              };\n              input.click();\n            }}>\n              <img className=\"avatar\" id=\"changeAvatar\" src={authUrl+states.accountInformation.avatar}/>\n              <span id=\"changeAvatarText\">Change</span>\n            </div>\n            <h3 id=\"accountSettingsUsername\" contentEditable>{states.accountInformation.username}</h3> @{states.accountInformation.tag}\n          </div>\n          <h5>Tell us a bit about you:</h5>\n          <div contentEditable id=\"changeAboutMe\"></div>\n          <div style={{\n              flexGrow: 0,\n              display: \"flex\",\n              flexDirection: \"row\",\n              gap: 5,\n              alignItems: \"center\"\n              }}>\n            Theme:\n            <select defaultValue={states.theme}>\n              <option value=\"dark\" onClick={() => {setTimeout(() => {\n                states.setTheme(\"dark\");\n                localStorage.setItem(\"theme\", \"dark\");\n                customThemeDisplayRef.current.hidden = true;\n              }, 50);}}>Dark</option>\n              <option value=\"medium\" onClick={() => {setTimeout(() => {\n                states.setTheme(\"medium\");\n                localStorage.setItem(\"theme\", \"medium\");\n                customThemeDisplayRef.current.hidden = true;\n              }, 50);}}>Medium</option>\n              <option value=\"light\" onClick={() => {setTimeout(() => {\n                states.setTheme(\"light\");\n                localStorage.setItem(\"theme\", \"light\");\n                customThemeDisplayRef.current.hidden = true;\n              }, 50);}}>Light</option>\n              <option value=\"green\" onClick={() => {setTimeout(() => {\n                states.setTheme(\"green\");\n                localStorage.setItem(\"theme\", \"green\");\n                customThemeDisplayRef.current.hidden = true;\n              }, 50);}}>Greeeeeeeeeeeeeeeeeeeeeeeeeeen</option>\n              <option value=\"custom\" onClick={() => {setTimeout(() => {\n                states.setTheme(\"custom\");\n                localStorage.setItem(\"theme\", \"custom\");\n                customThemeDisplayRef.current.hidden = false;\n              }, 50);}}>Custom</option>\n            </select>\n          </div>\n          <span hidden={states.theme !== \"custom\"} ref={customThemeDisplayRef}>Custom Theme Hex Colour: #\n            <span id=\"accountSettingsCustomTheme\" contentEditable\n            ref={customThemeEditRef} onInput={() => {\n                updateCustomTheme(customThemeEditRef.current.innerText, states);\n              }}>\n              {states.themeHex}\n            </span>\n          </span>\n          <button>Delete Account</button>\n          <button>Change Password</button>\n          <button onClick={() => {\n            localStorage.setItem(\"sessionID\", null);\n            window.location = \"/\";\n          }}>Log Out</button>\n          <button onClick={() => {states.setActivePopover(null);}}>Done</button>\n        </Popover>\n      );\n    }}/>\n  </header>);\n};\n\nfunction PopoverParent({...props}) {\n  [states.activePopover, states.setActivePopover] = React.useState(null);\n  return (\n    <div id=\"popoverParent\" style={{display: states.activePopover == null ? \"none\" : \"flex\"}} onClick={() => {\n      states.setActivePopover(null);\n    }} {...props}>{states.activePopover}</div>\n  );\n}\n\n// for popups / popovers in desktop, render as separate screens on mobile\nfunction Popover({children, title, style={}, ...props}) {\n  return <div id=\"popover\" style={{margin: style.margin ? style.margin : \"auto\", ...style}} onClick={event => {\n    event.stopPropagation();\n  }} {...props}>\n    <div id=\"popoverHeaderBar\">\n      <h3>{title}</h3>\n      <div style={{flexGrow: 1}}></div>\n      <button onClick={() => {states.setActivePopover(null);}} className=\"material-symbols-outlined\">close</button>\n    </div>\n    {children}\n  </div>\n}\n\nfunction SignInPopover ({ error=\"\" }) {\n  return (<Popover title=\"Sign In\">\n    <span>Welcome back! If you don't already have an account please <a href=\"#\" onClick={() => states.setActivePopover(<CreateAccountPopover/>)}>create an account</a> instead.</span>\n    <div id=\"loginform\">\n      <em id=\"signInErrorMessage\">{error}</em>\n      <div style={{display:\"grid\",gridTemplateColumns:\"auto auto\"}}>\n      <label>Email address </label><input type=\"email\" id=\"email\" className=\"textBox\" ref={emailRef}/>\n      <label>Password </label><input type=\"password\" id=\"password\" className=\"textBox\" ref={passwordRef}/>\n      </div><br/>\n      <button onClick={() => doTheLoginThingy(false)}>Sign In</button>\n    </div>\n  </Popover>);\n}\n\nfunction CreateAccountPopover ({ error=\"\" }) {\n  return (<Popover title=\"Create Account\">\n  <span>Welcome to Platypuss! If you already have an account please <a href=\"#\" onClick={() => states.setActivePopover(<SignInPopover/>)}>sign in</a> instead.</span>\n  <br/><strong>By using Platypuss you confirm that you have read and agreed to our <a href=\"/legal\">legal agreements</a>.</strong>\n    <div id=\"loginform\">\n      {error ? <em id=\"signInErrorMessage\">{error}</em> : \"\"}\n      <div style={{display:\"grid\",gridTemplateColumns:\"auto auto\"}}>\n      <label>Email address </label><input type=\"email\" id=\"email\" className=\"textBox\" ref={emailRef}/>\n      <label>Username </label><input type=\"text\" id=\"unam\" className=\"textBox\" ref={usernameRef}/>\n      <label>Password </label><input type=\"password\" id=\"password\" className=\"textBox\" ref={passwordRef}/>\n      <label>Confirm Password </label><input type=\"password\" id=\"confirmPassword\" className=\"textBox\" ref={confirmPasswordRef}/>\n      </div><br/>\n      <button onClick={() => doTheLoginThingy(true)}>Create Account</button>\n    </div>\n  </Popover>);\n}\n\nconst CarpPage = () => {\n  // Get the account information for the user\n  [states.accountInformation, states.setAccountInformation] = React.useState({});\n\n  React.useEffect(() => {\n      fetch(authUrl + \"/uinfo?id=\" + localStorage.getItem(\"sessionID\"))\n          .then(data => data.json())\n          .then(data => states.setAccountInformation(data))\n          .catch(() => { if (pageUrl.pathname === \"/chat\") window.location = \"/\" });\n  }, []);\n\n  // These let us refer to the text boxes later on\n  emailRef = React.useRef(null);\n  passwordRef = React.useRef(null);\n  usernameRef = React.useRef(null);\n  confirmPasswordRef = React.useRef(null);\n  \n  let theme = \"medium\";\n  let themeHex = \"000000\";\n  if (browser && !states.hasRendered) {\n    themeHex = localStorage.getItem(\"themeHex\");\n    if (themeHex == null) themeHex = \"000000\";\n    switch (localStorage.getItem(\"theme\")) {\n      case \"custom\":\n      case \"dark\":\n      case \"light\":\n      case \"green\":\n      case \"medium\":\n        theme = localStorage.getItem(\"theme\");\n        break;\n      default:\n        break;\n    }\n  }\n\n  [states.theme, states.setTheme] = React.useState(theme); // what theme we're using\n  [states.themeHex, states.setThemeHex] = React.useState(themeHex); // hex colour code of our custom theme\n\n  return (<>\n    <PageHeader className={\n      states.theme === \"custom\" ? \"\" :\n      states.theme === \"green\" ? \"greenThemed\" :\n      states.theme === \"light\" ? \"lightThemed\" :\n      \"darkThemed\"}/>\n    <main id=\"mainPage\" className={\n      states.theme === \"custom\" ? \"\" :\n      states.theme === \"green\" ? \"greenThemed\" :\n      states.theme === \"dark\" ? \"darkThemed\" :\n      \"lightThemed\"}>\n      <img style={{\n        flexShrink: 1,\n        overflow: \"hidden\",\n        alignSelf: \"stretch\"\n      }} alt=\"imagine a fish\" src=\"https://upload.wikimedia.org/wikipedia/commons/a/ac/Unsere_S%C3%BC%C3%9Fwasserfische_%28Tafel_33%29_%286102602781%29.jpg\"/>\n    </main>\n    <footer className={\n      states.theme === \"custom\" ? \"\" :\n      states.theme === \"green\" ? \"greenThemed\" :\n      states.theme === \"dark\" ? \"darkThemed\" :\n      \"lightThemed\"}>do you like the new interim logo? if not then feel free to design your own and hit me up with a <a href=\"https://github.com/kettle-7/platypuss/issues/new\">github issue</a></footer>\n    <PopoverParent className={\n      states.theme === \"custom\" ? \"\" :\n      states.theme === \"green\" ? \"greenThemed\" :\n      states.theme === \"light\" ? \"lightThemed\" :\n      \"darkThemed\"}/>\n  </>);\n};\n\nexport default CarpPage;\n\nexport const Head = () => (\n  <title>hehe faush &gt;:3</title>\n);\n"],"names":["RGBToString","RGB","convertedString","finalString","i","push","Math","floor","toString","multiplyRGB","multiplier","newRGB","updateCustomTheme","attemptHex","states","darkColorFix","toLowerCase","slice","length","parseInt","setTimeout","setThemeHex","localStorage","setItem","rgb","hexString","hex","convertedHex","finalHex","unshift","stringToRGB","colorScheme","primaryColor","secondaryColor","document","body","style","setProperty","browser","window","pageUrl","URL","location","authUrl","PageHeader","title","iconClickEvent","props","customThemeDisplayRef","React","customThemeEditRef","fetch","getItem","then","data","json","setAccountInformation","catch","pathname","className","onClick","cursor","src","flexGrow","accountInformation","avatar","setActivePopover","Popover","id","input","createElement","type","multiple","accept","onchange","async","event","file","target","files","size","request","XMLHttpRequest","open","onreadystatechange","readyState","DONE","status","reload","console","log","upload","onprogress","setAvatarProgress","loaded","total","send","bytes","click","contentEditable","username","tag","display","flexDirection","gap","alignItems","defaultValue","theme","value","setTheme","current","hidden","ref","onInput","innerText","themeHex","PopoverParent","activePopover","_extends","children","margin","stopPropagation","CarpPage","hasRendered","flexShrink","overflow","alignSelf","alt","href","Head"],"sourceRoot":""}