{"version":3,"file":"component---src-pages-chat-js-77e38eeef843d6a32eab.js","mappings":"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","sources":["webpack://platypuss-beta/./src/components/common.jsx","webpack://platypuss-beta/./src/pages/chat.js"],"sourcesContent":["import React from \"react\";\n\nexport const PageHeader = ({title, iconClickEvent}) => {\n    return (<header>\n        <img onClick={iconClickEvent ? iconClickEvent : () => {window.location = \"/\"}} style={{cursor: \"pointer\"}} src=\"/icons/icon-48x48.png\"/>\n        <h2 onClick={() => {window.location = \"/\"}} style={{cursor: \"pointer\"}}>\n            {title ? title : \"(Beta!) Platypuss\"}\n        </h2>\n    </header>);\n};","/************************************************************************\n* Copyright 2021-2024 Ben Keppel                                        *\n*                                                                       *\n* This program is free software: you can redistribute it and/or modify  *\n* it under the terms of the GNU General Public License as published by  *\n* the Free Software Foundation, either version 3 of the License, or     *\n* (at your option) any later version.                                   *\n*                                                                       *\n* This program is distributed in the hope that it will be useful,       *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n* GNU General Public License for more details.                          *\n*                                                                       *\n* You should have received a copy of the GNU General Public License     *\n* along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n************************************************************************/\n// °^° i am pingu\n\nimport * as Common from \"../components/common\";\nimport * as React from \"react\";\nimport \"./light.scss\";\n\nvar userCache = {}; // A cache of data on users so we don't constantly have to look it up\nvar messageCache = {}; // The same but for messages, we might not need this\nvar permissions = {}; // The permissions we have, key being an identifier and value being a friendly description\nvar states = {populated:false}; // One global variable for storing React state objects so we can access them anywhere\nvar openSockets = {}; // Keeps track of open websockets\nvar peers = {}; // Keeps track of other people on the server (platonically of course :3)\nvar loadedMessages = 0; // The number of messages loaded in the current view, used when loading older messages\nvar serverHashes = {}; // We can use these to get links to specific servers / maybe rooms in the future\nvar browser = typeof window !== \"undefined\"; // check if we're running in a browser rather than the build environment\n\nvar pageUrl = browser ? new URL(window.location) : new URL(\"http://localhost:8000\"); // window is not defined in the testing environment so just assume localhost\nvar authUrl = \"https://platypuss.net\"; // Authentication server, you shouldn't have to change this but it's a variable just in case\nconst emailRegexp = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/gi;\npageUrl.protocol = \"https\"; // remove this in production\n\n// thanks bryc on stack overflow ^w^\nfunction hashPassword (str, seed = 20) { // hashes things somehow\n    let h1 = 0xdeadbeef ^ seed, // had to be something\n    h2 = 0x41c6ce57 ^ seed;\n    for (let i = 0, ch; i < str.length; i++) {\n        ch = str.charCodeAt(i);\n        // Math.imul multiplies without loss of precision\n        h1 = Math.imul(h1 ^ ch, 2654435761);\n        h2 = Math.imul(h2 ^ ch, 1597334677);\n    }\n    \n    h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n    h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n\n    return (h2>>>0).toString(16).padStart(8,0)+(h1>>>0).toString(16).padStart(8,0);\n};\n\n// Fetch data on one user, from cache if possible but from the authentication server otherwise\nfunction fetchUser(id) {\n  return new Promise((resolve, reject) => {\n    if (userCache[id] == undefined) {\n      // try fetch data from the authentication server\n      fetch(authUrl+'/uinfo?id='+id).then(response => {\n        // try turn the json response into an object\n        response.json().then(responseObject => {\n          userCache[id] = responseObject;\n          resolve(responseObject);\n        }).catch(()=>reject()); // if it's not valid json then reject the promise\n      }).catch(()=>reject()); // same for if we can't connect to the server for some reason\n    } else {\n      resolve(userCache[id]); // we already know about the user so don't look them up\n    }\n  });\n}\n\n// The bar on the left showing the servers you're in, also for navigation\nfunction ServersBar({shown}) {\n  return (<div className=\"sidebar\" id=\"serversBar\" style={{display: shown ? \"flex\" : \"none\"}}>\n    <img className=\"serverIcon\" src=\"\" alt=\"+\" id=\"newServerButton\"/>\n    {Object.values(states.servers).map(server => (<ServerIcon server={server}></ServerIcon>))}\n  </div>);\n}\n\n// The bar on the right showing other server members\nfunction PeersBar({focusedServer, shown}) {\n  return (<div className=\"sidebar\" id=\"serversBar\" style={{display: shown ? \"flex\" : \"none\"}}>\n    <img className=\"serverIcon material-symbols-outlined\" src=\"\" alt=\"+\" id=\"newServerButton\"/>\n  </div>);\n}\n\n// Renders a single message\nasync function Message({message}) {\n  return (<div className=\"message1\">\n    <img src={await(fetchUser(message.author)).avatar} alt=\"\"/>\n    <div className=\"message2\">\n      <h3 className=\"messageUsernameDisplay\">{await(fetchUser(message.author)).username}</h3>\n      <p>{message.content}</p>\n    </div>\n  </div>);\n}\n\n// The midsection between these two aforementioned bars\nfunction MiddleSection({shown}) {\n  return (<div id=\"middleSection\" style={{display: shown ? \"flex\" : \"none\"}}>\n    <div id=\"aboveScrolledArea\"></div>\n    <div id=\"scrolledArea\"> {/* Has a scrollbar, contains load more messages button but not message typing box */}\n      <div id=\"aboveMessageArea\"></div>\n      <div id=\"messageArea\">{Object.values(states.focusedRoomRenderedMessages).map(message => <Message message={message}/>)}</div>\n      <div id=\"belowMessageArea\"></div>\n    </div>\n    <div style={{height:5,background:\"linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.3))\"}}></div>\n    <div id=\"belowScrolledArea\">\n      <div contentEditable id=\"messageBox\"></div>\n      <button>upload</button>\n      <button>send</button>\n    </div>\n  </div>);\n}\n\n// a server icon button thing\nfunction ServerIcon({server}) {\n  [server.manifest, server.setManifest] = React.useState({\n    icon: \"\",\n    title: \"Couldn't connect to this server 🐙\"\n  });\n  return (<div className=\"popoverContainer\">\n    <img className=\"serverIcon\" src={server.manifest.icon} alt=\"🐙\"/>\n    <div className=\"serverIconPopover\">{server.manifest.title}</div>\n  </div>);\n}\n\nfunction RoomLink({room}) {\n  return (<div className=\"roomLink\" style={{cursor:\"pointer\"}}>\n    <a>{room.name}</a>\n  </div>);\n}\n\nfunction RoomsBar({shown}) {\n  return (<div className=\"sidebar\" id=\"roomsBar\" style={{display: shown ? \"flex\" : \"none\"}}>\n    <div id=\"serverTitle\"><h3 style={{margin: 5, cursor: \"pointer\"}}>server name goes here ???</h3>\n    <span class=\"material-symbols-outlined\">stat_minus_1</span></div>\n    {Object.values(states.focusedServerRenderedRooms).map(room => (<RoomLink server={room}></RoomLink>))}\n    {Object.values(states.focusedServerRenderedRooms).length == 0 ? <p>This server doesn't have any rooms in it.</p> : <></>}\n  </div>);\n}\n\n// The document head contains metadata, most of it is defined in use-site-metadata.jsx\nexport const Head = () => (\n  <title>(Beta!) Platypuss</title>\n);\n\nasync function loadView() {\n  // don't try load the client as part of the page compiling\n  if (!browser) return;\n  // connect to the authentication server to get the list of server's we're in and their session tokens\n  for (let message of Object.keys(states.focusedRoomRenderedMessages)) {\n    delete states.focusedRoomRenderedMessages[message];\n  }\n  states.setFocusedRoomRenderedMessages({});\n  fetch(`${authUrl}/getServerTokens?id=${localStorage.getItem(\"sessionID\")}`).then(data => data.json()).then(async function(data) {\n    for (let socket of Object.values(openSockets)) {\n      socket.close();\n    }\n    for (let serverName in data.servers) { // this for loop lets us keep the same server focused between reloads\n      serverHashes[serverName] = hashPassword(serverName); // it's not a password but who cares\n      if (states.focusedServer == {manifest:{}}) {\n        if (window.location.toString().replace(/^.*\\#/g, \"\") == serverHashes[serverName]) {\n          states.setFocusedServer(serverName);\n        }\n      }\n    }\n    let servers = {};\n    for (let serverCode of Object.keys(data.servers)) {\n      let splitServerCode = serverCode.split(' '); // take the data the authentication server gives us about the server and use it to connect\n      let ip = splitServerCode[0];\n      let inviteCode = splitServerCode[1];\n      let subserver = splitServerCode[2];\n      servers[serverCode] = { // add this server to our list of servers, making an icon\n        ip: ip,\n        serverCode: serverCode,\n        inviteCode: inviteCode,\n        subserver: subserver,\n        manifest: { // we haven't actually heard from the server itself what its icon, name etc are\n          title: \"Loading\",\n          icon: \"/icon.png\",\n          memberCount: 0,\n          public: false,\n          description: \"Waiting for a response from the server\"\n        }\n      };\n      // get this information from the server\n      fetch(pageUrl.protocol + \"//\"+ip+\"/\"+subserver).then(response => response.json()).then(serverManifest => {\n        servers = states.servers;\n        servers[serverCode].setManifest(serverManifest);\n        states.setServers(servers);\n      }).catch(error => {console.log(error)});\n      // Open a socket connection with the server\n      let socket = new WebSocket((pageUrl.protocol == \"https:\" ? \"wss:\" : \"ws\") + \"//\" + ip);\n      socket.onerror = () => {\n        // The server's disconnected, in which case if we're focusing on it we should focus on a different server\n        console.error(`Warning: couldn't connect to ${ip}, try check your internet connection or inform the owner(s) of the server.`);\n        if (states.focusedServer.serverCode == serverCode) {\n          // window.location.reload();\n        }\n      };\n      socket.onopen = () => { // Send a login packet to the server once the connection is made\n        openSockets[serverCode] = socket;\n        socket.send(JSON.stringify({\n          eventType: \"login\",\n          subserver: subserver,\n          inviteCode: inviteCode,\n          sessionID: data.servers[serverCode]\n        }));\n      };\n      socket.onclose = () => {\n        // same as onerror above\n        console.error(`Warning, the server at ${ip} closed.`);\n        if (states.focusedServer.serverCode == serverCode) {\n          // window.location.reload();\n        }\n      };\n      socket.onmessage = async event => {\n        let packet = JSON.parse(event.data);\n        switch (packet.eventType) {\n          case \"message\":\n            if (states.focusedServer.serverCode !== serverCode) break;\n            states.focusedRoomRenderedMessages[packet.message.id] = packet.message;\n        }\n      };\n    }\n    // update our list of servers and if no server is currently focused pick the first one\n    console.log(servers);\n    states.setServers(servers);\n    if (states.focusedServer == {manifest:{}}) {\n      states.setFocusedServer(states.servers[Object.keys(data.servers)[0]]);\n    }\n  }).catch(error => console.log(error));\n}\n\n// The page itself\nexport default function ChatPage() {\n  // set a bunch of empty React state objects for stuff that needs to be accessed throughout the program\n  [states.servers, states.setServers] = React.useState({}); // Data related to servers the user is in\n  [states.focusedRoomRenderedMessages, states.setFocusedRoomRenderedMessages] = React.useState({}); // The <Message/> elements shown in the view, set in ChatPage\n  [states.focusedServer, states.setFocusedServer] = React.useState({manifest:{}}); // An object representing the currently focused server\n  [states.focusedRoom, states.setFocusedRoom] = React.useState({}); // An object representing the currently focused room\n  [states.focusedServerRenderedRooms, states.setFocusedServerRenderedRooms] = React.useState({}); // The <RoomLink/> elements in the sidebar for this server\n  [states.mobileSidebarShown, states.setMobileSidebarShown] = React.useState(true); // whether to show the sidebar on mobile devices, is open by default when you load the page\n  [states.useMobileUI, states.setUseMobileUI] = React.useState(browser ? (window.innerWidth * 2.54 / 96 / window.devicePixelRatio) < 20 : false); // Use mobile UI if the screen is less than 20cm wide\n\n  // respond to changes in screen width\n  if (browser)\n  window.addEventListener(\"resize\", () => {\n    states.setUseMobileUI(browser ? (window.innerWidth * 2.54 / 96 / window.devicePixelRatio) < 20 : false);\n  });\n\n  console.log(states.populated);\n  if (!states.populated) loadView();\n  states.populated = true;\n  // return the basic page layout\n  return (<>\n    <Common.PageHeader title={states.focusedServer.manifest.title} iconClickEvent={() => {\n      if (states.useMobileUI) {\n        states.setMobileSidebarShown(!states.mobileSidebarShown);\n      } else {\n        window.location = \"/\";\n      }\n    }}/>\n    <main>\n      <div id=\"chatPage\">\n        <ServersBar shown={states.mobileSidebarShown || !states.useMobileUI}/>\n        <RoomsBar shown={states.mobileSidebarShown || !states.useMobileUI}/>\n        <MiddleSection shown={!states.mobileSidebarShown || !states.useMobileUI}/>\n        <PeersBar shown={states.mobileSidebarShown || !states.useMobileUI}/>\n      </div>\n    </main>\n  </>);\n}\n"],"names":["PageHeader","title","iconClickEvent","React","onClick","window","location","style","cursor","src","userCache","states","populated","openSockets","serverHashes","browser","pageUrl","URL","authUrl","hashPassword","str","seed","h1","h2","ch","i","length","charCodeAt","Math","imul","toString","padStart","fetchUser","id","Promise","resolve","reject","undefined","fetch","then","response","json","responseObject","catch","ServersBar","shown","className","display","alt","Object","values","servers","map","server","ServerIcon","PeersBar","focusedServer","async","Message","message","author","avatar","username","content","MiddleSection","focusedRoomRenderedMessages","height","background","contentEditable","manifest","setManifest","icon","RoomLink","room","name","RoomsBar","margin","class","focusedServerRenderedRooms","protocol","Head","ChatPage","setServers","setFocusedRoomRenderedMessages","setFocusedServer","focusedRoom","setFocusedRoom","setFocusedServerRenderedRooms","mobileSidebarShown","setMobileSidebarShown","useMobileUI","setUseMobileUI","innerWidth","devicePixelRatio","addEventListener","console","log","keys","localStorage","getItem","data","socket","close","serverName","replace","serverCode","splitServerCode","split","ip","inviteCode","subserver","memberCount","public","description","serverManifest","error","WebSocket","onerror","onopen","send","JSON","stringify","eventType","sessionID","onclose","onmessage","packet","parse","event","loadView","Common"],"sourceRoot":""}