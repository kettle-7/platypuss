{"version":3,"file":"component---src-pages-chat-js-8360cc6bb0d58a3ce67d.js","mappings":"0WAoBIA,EAAU,CAAC,EACXC,EAAY,CAAC,EAMbC,EAAU,wBAGP,SAASC,EAAUC,GACxB,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACNC,MAAjBP,EAAUG,GAEZK,MAAMP,EAAQ,aAAaE,GAAIM,MAAKC,IAElCA,EAASC,OAAOF,MAAKG,IACnBZ,EAAUG,GAAMS,EAChBP,EAAQO,EAAe,IACtBC,OAAM,IAAIP,KAAS,IACrBO,OAAM,IAAIP,MAEbD,EAAQL,EAAUG,GACpB,GAEJ,CAGO,SAASW,GAAW,QAACf,IAC1B,OAAQgB,EAAAA,cAAA,OAAKC,UAAU,UAAUb,GAAG,cAClCY,EAAAA,cAAA,OAAKC,UAAU,aAAaC,IAAI,GAAGC,IAAI,IAAIf,GAAG,oBAC7CgB,OAAOC,OAAOrB,GAASsB,KAAIC,GAAWP,EAAAA,cAACQ,EAAU,CAACD,OAAQA,EAAQE,UAAWC,SAElF,CAGO,SAASC,GAAS,cAACC,IACxB,OAAQZ,EAAAA,cAAA,OAAKC,UAAU,UAAUb,GAAG,cAClCY,EAAAA,cAAA,OAAKC,UAAU,uCAAuCC,IAAI,GAAGC,IAAI,IAAIf,GAAG,oBAE5E,CAGO,SAASyB,GAAc,cAACD,IAC7B,OAAQZ,EAAAA,cAAA,OAAKZ,GAAG,iBACdY,EAAAA,cAAA,OAAKZ,GAAG,sBACRY,EAAAA,cAAA,OAAKZ,GAAG,gBAAe,IACrBY,EAAAA,cAAA,OAAKZ,GAAG,qBACRY,EAAAA,cAAA,OAAKZ,GAAG,gBACRY,EAAAA,cAAA,OAAKZ,GAAG,sBAEVY,EAAAA,cAAA,OAAKZ,GAAG,sBAEZ,CAGO,SAASoB,GAAW,OAACD,EAAM,UAAEE,IAKlC,OAJCF,EAAOO,SAAUP,EAAOQ,aAAef,EAAAA,SAAe,CACrDgB,QAAS,GACTC,YAAa,gCAEPjB,EAAAA,cAAA,OAAKC,UAAU,aAAaC,IAAI,4BAA4BC,IAAI,MAC1E,CAGO,MAAMe,EAAOA,IAClBlB,EAAAA,cAAA,aAAO,qBAIM,SAASmB,IACtB,OAAQnB,EAAAA,cAAAA,EAAAA,SAAA,KACNA,EAAAA,cAAA,cAAQA,EAAAA,cAAA,UAAI,sBACZA,EAAAA,cAAA,YACEA,EAAAA,cAAA,OAAKZ,GAAG,YACNY,EAAAA,cAACD,EAAU,CAACf,QAASA,IACrBgB,EAAAA,cAACa,EAAa,MACdb,EAAAA,cAACW,EAAQ,QAIjB,C","sources":["webpack://platypuss-beta/./src/pages/chat.js"],"sourcesContent":["/************************************************************************\n* Copyright 2021-2024 Ben Keppel                                        *\n*                                                                       *\n* This program is free software: you can redistribute it and/or modify  *\n* it under the terms of the GNU General Public License as published by  *\n* the Free Software Foundation, either version 3 of the License, or     *\n* (at your option) any later version.                                   *\n*                                                                       *\n* This program is distributed in the hope that it will be useful,       *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n* GNU General Public License for more details.                          *\n*                                                                       *\n* You should have received a copy of the GNU General Public License     *\n* along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n************************************************************************/\n\nimport * as React from \"react\";\nimport \"./light.scss\";\n\nvar servers = {}; // Data related to servers the user is in\nvar userCache = {}; // A cache of data on users so we don't constantly have to look it up\nvar messageCache = {}; // The same but for messages\nvar focusedRoomRenderedMessages = {}; // The <Message/> elements shown in the view\nvar focusedServerRenderedRooms = {}; // The <RoomLink/> elements in the sidebar for this server\nvar permissions = {}; // The permissions we have, key being an identifier and value being a friendly description\n\nvar authUrl = \"https://platypuss.net\"; // Authentication server, you shouldn't have to change this but it's a variable just in case\n\n// Fetch data on one user, from cache if possible but from the authentication server otherwise\nexport function fetchUser(id) {\n  return new Promise((resolve, reject) => {\n    if (userCache[id] == undefined) {\n      // try fetch data from the authentication server\n      fetch(authUrl+'/uinfo?id='+id).then(response => {\n        // try turn the json response into an object\n        response.json().then(responseObject => {\n          userCache[id] = responseObject;\n          resolve(responseObject);\n        }).catch(()=>reject()); // if it's not valid json then reject the promise\n      }).catch(()=>reject());\n    } else {\n      resolve(userCache[id]); // we already know about the user so don't look them up\n    }\n  });\n}\n\n// The bar on the left showing the servers you're in, also for navigation\nexport function ServersBar({servers}) {\n  return (<div className=\"sidebar\" id=\"serversBar\">\n    <img className=\"serverIcon\" src=\"\" alt=\"+\" id=\"newServerButton\"/>\n    {Object.values(servers).map(server => (<ServerIcon server={server} serverBar={this}></ServerIcon>))}\n  </div>);\n}\n\n// The bar on the right showing other server members\nexport function PeersBar({focusedServer}) {\n  return (<div className=\"sidebar\" id=\"serversBar\">\n    <img className=\"serverIcon material-symbols-outlined\" src=\"\" alt=\"+\" id=\"newServerButton\"/>\n  </div>);\n}\n\n// The midsection between these two aforementioned bars\nexport function MiddleSection({focusedServer}) {\n  return (<div id=\"middleSection\">\n    <div id=\"aboveScrolledArea\"></div>\n    <div id=\"scrolledArea\"> {/* Has a scrollbar, contains load more messages button but not message typing box */}\n      <div id=\"aboveMessageArea\"></div>\n      <div id=\"messageArea\"></div>\n      <div id=\"belowMessageArea\"></div>\n    </div>\n    <div id=\"belowScrolledArea\"></div>\n  </div>);\n}\n\n// a server icon button thing\nexport function ServerIcon({server, serverBar}) {\n  [server.manifest, server.setManifest] = React.useState({\n    iconURL: \"\",\n    serverTitle: \"connecting to the server???\"\n  });\n  return (<img className=\"serverIcon\" src=\"{server.manifest.iconURL}\" alt=\"🐙\"/>);\n}\n\n// The document head contains metadata, most of it is defined in use-site-metadata.jsx\nexport const Head = () => (\n  <title>(Beta!) Platypuss</title>\n);\n\n// The page itself\nexport default function ChatPage() {\n  return (<>\n    <header><h2>(Beta!) Platypuss</h2></header>\n    <main>\n      <div id=\"chatPage\">\n        <ServersBar servers={servers}/>\n        <MiddleSection/>\n        <PeersBar/>\n      </div>\n    </main>\n  </>);\n}\n"],"names":["servers","userCache","authUrl","fetchUser","id","Promise","resolve","reject","undefined","fetch","then","response","json","responseObject","catch","ServersBar","React","className","src","alt","Object","values","map","server","ServerIcon","serverBar","this","PeersBar","focusedServer","MiddleSection","manifest","setManifest","iconURL","serverTitle","Head","ChatPage"],"sourceRoot":""}