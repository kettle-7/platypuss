{"version":3,"file":"component---src-pages-chat-js-927175480958698da4d9.js","mappings":"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","sources":["webpack://platypuss-beta/./src/components/common.jsx","webpack://platypuss-beta/./src/pages/chat.js"],"sourcesContent":["import React from \"react\";\n\nexport const PageHeader = ({ title }) => {\n    return (<header><img onClick={()=>{window.location = \"/\"}} style={{cursor: \"pointer\"}} src=\"/icons/icon-48x48.png\"/><h2 onClick={()=>{window.location = \"/\"}} style={{cursor: \"pointer\"}}>{title ? title : \"(Beta!) Platypuss\"}</h2></header>);\n};","/************************************************************************\n* Copyright 2021-2024 Ben Keppel                                        *\n*                                                                       *\n* This program is free software: you can redistribute it and/or modify  *\n* it under the terms of the GNU General Public License as published by  *\n* the Free Software Foundation, either version 3 of the License, or     *\n* (at your option) any later version.                                   *\n*                                                                       *\n* This program is distributed in the hope that it will be useful,       *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n* GNU General Public License for more details.                          *\n*                                                                       *\n* You should have received a copy of the GNU General Public License     *\n* along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n************************************************************************/\n// °^° i am pingu\n\nimport * as Common from \"../components/common\";\nimport * as React from \"react\";\nimport \"./light.scss\";\n\nvar userCache = {}; // A cache of data on users so we don't constantly have to look it up\nvar messageCache = {}; // The same but for messages, we might not need this\nvar permissions = {}; // The permissions we have, key being an identifier and value being a friendly description\nvar states = {populated:false}; // One global variable for storing React state objects so we can access them anywhere\nvar openSockets = {}; // Keeps track of open websockets\nvar peers = {}; // Keeps track of other people on the server (platonically of course :3)\nvar loadedMessages = 0; // The number of messages loaded in the current view, used when loading older messages\nvar serverHashes = {}; // We can use these to get links to specific servers / maybe rooms in the future\n\nvar pageUrl = typeof window !== \"undefined\" ? new URL(window.location) : new URL(\"http://localhost:8000\"); // window is not defined in the testing environment so just assume localhost\nvar authUrl = \"https://platypuss.net\"; // Authentication server, you shouldn't have to change this but it's a variable just in case\nconst emailRegexp = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/gi;\npageUrl.protocol = \"https\"; // remove this in production\n\n// thanks bryc on stack overflow ^w^\nfunction hashPassword (str, seed = 20) { // hashes things somehow\n    let h1 = 0xdeadbeef ^ seed, // had to be something\n    h2 = 0x41c6ce57 ^ seed;\n    for (let i = 0, ch; i < str.length; i++) {\n        ch = str.charCodeAt(i);\n        // Math.imul multiplies without loss of precision\n        h1 = Math.imul(h1 ^ ch, 2654435761);\n        h2 = Math.imul(h2 ^ ch, 1597334677);\n    }\n    \n    h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n    h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n\n    return (h2>>>0).toString(16).padStart(8,0)+(h1>>>0).toString(16).padStart(8,0);\n};\n\n// Fetch data on one user, from cache if possible but from the authentication server otherwise\nfunction fetchUser(id) {\n  return new Promise((resolve, reject) => {\n    if (userCache[id] == undefined) {\n      // try fetch data from the authentication server\n      fetch(authUrl+'/uinfo?id='+id).then(response => {\n        // try turn the json response into an object\n        response.json().then(responseObject => {\n          userCache[id] = responseObject;\n          resolve(responseObject);\n        }).catch(()=>reject()); // if it's not valid json then reject the promise\n      }).catch(()=>reject()); // same for if we can't connect to the server for some reason\n    } else {\n      resolve(userCache[id]); // we already know about the user so don't look them up\n    }\n  });\n}\n\n// The bar on the left showing the servers you're in, also for navigation\nfunction ServersBar() {\n  return (<div className=\"sidebar\" id=\"serversBar\">\n    <img className=\"serverIcon\" src=\"\" alt=\"+\" id=\"newServerButton\"/>\n    {Object.values(states.servers).map(server => (<ServerIcon server={server}></ServerIcon>))}\n  </div>);\n}\n\n// The bar on the right showing other server members\nfunction PeersBar({focusedServer}) {\n  return (<div className=\"sidebar\" id=\"serversBar\">\n    <img className=\"serverIcon material-symbols-outlined\" src=\"\" alt=\"+\" id=\"newServerButton\"/>\n  </div>);\n}\n\n// Renders a single message\nfunction Message({message}) {\n  return (<div className=\"message1\">\n    <img src={userCache[message.author].avatar} alt=\"\"/>\n    <div className=\"message2\">\n      <h3 className=\"messageUsernameDisplay\">{userCache[message.author].username}</h3>\n      <p>{message.content}</p>\n    </div>\n  </div>);\n}\n\n// The midsection between these two aforementioned bars\nfunction MiddleSection() {\n  return (<div id=\"middleSection\">\n    <div id=\"aboveScrolledArea\"></div>\n    <div id=\"scrolledArea\"> {/* Has a scrollbar, contains load more messages button but not message typing box */}\n      <div id=\"aboveMessageArea\"></div>\n      <div id=\"messageArea\">{Object.values(states.focusedRoomRenderedMessages).map(message => <Message/>)}</div>\n      <div id=\"belowMessageArea\"></div>\n    </div>\n    <div id=\"belowScrolledArea\"></div>\n  </div>);\n}\n\n// a server icon button thing\nfunction ServerIcon({server}) {\n  [server.manifest, server.setManifest] = React.useState({\n    iconURL: \"\",\n    serverTitle: \"connecting to the server???\"\n  });\n  return (<img className=\"serverIcon\" src={server.manifest.icon} alt=\"🐙\"/>);\n}\n\nfunction RoomLink({room}) {\n  return (<div className=\"roomLink\">\n    <a>{room.name}</a>\n  </div>);\n}\n\nfunction RoomsBar() {\n  return (<div className=\"sidebar\" id=\"roomsBar\">\n    <div id=\"serverTitle\"><h3 style={{margin: 5}}>server name goes here ???</h3></div>\n    {Object.values(states.focusedServerRenderedRooms).map(room => (<ServerIcon server={room}></ServerIcon>))}\n    {Object.values(states.focusedServerRenderedRooms).length == 0 ? <p>This server doesn't have any rooms in it.</p> : <></>}\n  </div>);\n}\n\n// The document head contains metadata, most of it is defined in use-site-metadata.jsx\nexport const Head = () => (\n  <title>(Beta!) Platypuss</title>\n);\n\nasync function loadView() {\n  // don't try load the client as part of the page compiling\n  if (typeof window === \"undefined\") return;\n  // connect to the authentication server to get the list of server's we're in and their session tokens\n  for (let message of Object.keys(states.focusedRoomRenderedMessages)) {\n    delete states.focusedRoomRenderedMessages[message];\n  }\n  states.setFocusedRoomRenderedMessages({});\n  fetch(`${authUrl}/getServerTokens?id=${localStorage.getItem(\"sessionID\")}`).then(data => data.json()).then(async function(data) {\n    for (let socket of Object.values(openSockets)) {\n      socket.close();\n    }\n    for (let serverName in data.servers) { // this for loop lets us keep the same server focused between reloads\n      serverHashes[serverName] = hashPassword(serverName); // it's not a password but who cares\n      if (states.focusedServer == {manifest:{}}) {\n        if (window.location.toString().replace(/^.*\\#/g, \"\") == serverHashes[serverName]) {\n          states.setFocusedServer(serverName);\n        }\n      }\n    }\n    let servers = {};\n    for (let serverCode of Object.keys(data.servers)) {\n      let splitServerCode = serverCode.split(' '); // take the data the authentication server gives us about the server and use it to connect\n      let ip = splitServerCode[0];\n      let inviteCode = splitServerCode[1];\n      let subserver = splitServerCode[2];\n      servers[serverCode] = { // add this server to our list of servers, making an icon\n        ip: ip,\n        inviteCode: inviteCode,\n        subserver: subserver,\n        manifest: { // we haven't actually heard from the server itself what its icon, name etc are\n          title: \"Loading\",\n          icon: \"/icon.png\",\n          memberCount: 0,\n          public: false,\n          description: \"Waiting for a response from the server\"\n        }\n      };\n      // get this information from the server\n      fetch(pageUrl.protocol + \"//\"+ip.toString()+\"/\"+subserver).then(response => response.json()).then(serverManifest => {\n        servers = states.servers;\n        servers[serverCode].setManifest(serverManifest);\n        states.setServers(servers);\n        console.log(serverManifest);\n      }).catch(error => {console.log(error)});\n    }\n    // update our list of servers and if no server is currently focused pick the first one\n    states.setServers(servers);\n    if (states.focusedServer == {manifest:{}}) {\n      states.setFocusedServer(states.servers[Object.keys(data.servers)[0]]);\n    }\n  }).catch(error => console.log(error));\n}\n\n// The page itself\nexport default function ChatPage() {\n  // set a bunch of empty React state objects for stuff that needs to be accessed throughout the program\n  [states.servers, states.setServers] = React.useState({}); // Data related to servers the user is in\n  [states.focusedRoomRenderedMessages, states.setFocusedRoomRenderedMessages] = React.useState({}); // The <Message/> elements shown in the view, set in ChatPage\n  [states.focusedServer, states.setFocusedServer] = React.useState({manifest:{}}); // An object representing the currently focused server\n  [states.focusedRoom, states.setFocusedRoom] = React.useState({}); // An object representing the currently focused room\n  [states.focusedServerRenderedRooms, states.setFocusedServerRenderedRooms] = React.useState({}); // The <RoomLink/> elements in the sidebar for this server\n  \n  console.log(states.populated);\n  if (!states.populated) loadView();\n  states.populated = true;\n  // return the basic page layout\n  return (<>\n    <Common.PageHeader title={states.focusedServer.manifest.title}/>\n    <main>\n      <div id=\"chatPage\">\n        <ServersBar/>\n        <RoomsBar/>\n        <MiddleSection/>\n        <PeersBar/>\n      </div>\n    </main>\n  </>);\n}\n"],"names":["PageHeader","title","React","onClick","window","location","style","cursor","src","userCache","states","populated","openSockets","serverHashes","pageUrl","URL","authUrl","hashPassword","str","seed","h1","h2","ch","i","length","charCodeAt","Math","imul","toString","padStart","ServersBar","className","id","alt","Object","values","servers","map","server","ServerIcon","PeersBar","focusedServer","Message","message","author","avatar","username","content","MiddleSection","focusedRoomRenderedMessages","manifest","setManifest","iconURL","serverTitle","icon","RoomsBar","margin","focusedServerRenderedRooms","room","protocol","Head","ChatPage","setServers","setFocusedRoomRenderedMessages","setFocusedServer","focusedRoom","setFocusedRoom","setFocusedServerRenderedRooms","console","log","async","keys","fetch","localStorage","getItem","then","data","json","socket","close","serverName","replace","serverCode","splitServerCode","split","ip","inviteCode","subserver","memberCount","public","description","response","serverManifest","catch","error","loadView","Common"],"sourceRoot":""}