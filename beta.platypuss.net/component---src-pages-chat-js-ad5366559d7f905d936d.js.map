{"version":3,"file":"component---src-pages-chat-js-ad5366559d7f905d936d.js","mappings":"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","sources":["webpack://platypuss-beta/./src/components/common.jsx","webpack://platypuss-beta/./src/pages/chat.js"],"sourcesContent":["import React from \"react\";\n\nexport const PageHeader = ({title, iconClickEvent}) => {\n    return (<header>\n        <img onClick={iconClickEvent ? iconClickEvent : () => {window.location = \"/\"}} style={{cursor: \"pointer\"}} src=\"/icons/icon-48x48.png\"/>\n        <h2 onClick={() => {window.location = \"/\"}} style={{cursor: \"pointer\"}}>\n            {title ? title : \"(Beta!) Platypuss\"}\n        </h2>\n    </header>);\n};","/************************************************************************\n* Copyright 2021-2024 Ben Keppel                                        *\n*                                                                       *\n* This program is free software: you can redistribute it and/or modify  *\n* it under the terms of the GNU General Public License as published by  *\n* the Free Software Foundation, either version 3 of the License, or     *\n* (at your option) any later version.                                   *\n*                                                                       *\n* This program is distributed in the hope that it will be useful,       *\n* but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n* GNU General Public License for more details.                          *\n*                                                                       *\n* You should have received a copy of the GNU General Public License     *\n* along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n************************************************************************/\n// °^° i am pingu\n\nimport * as Common from \"../components/common\";\nimport * as React from \"react\";\nimport \"./light.scss\";\n\nvar userCache = {}; // A cache of data on users so we don't constantly have to look it up\nvar messageCache = {}; // The same but for messages, we might not need this\nvar permissions = {}; // The permissions we have, key being an identifier and value being a friendly description\nvar states = {populated:false}; // One global variable for storing React state objects so we can access them anywhere\nvar openSockets = {}; // Keeps track of open websockets\nvar peers = {}; // Keeps track of other people on the server (platonically of course :3)\nvar loadedMessages = 0; // The number of messages loaded in the current view, used when loading older messages\nvar serverHashes = {}; // We can use these to get links to specific servers / maybe rooms in the future\nvar browser = typeof window !== \"undefined\"; // check if we're running in a browser rather than the build environment\n\nvar pageUrl = browser ? new URL(window.location) : new URL(\"http://localhost:8000\"); // window is not defined in the testing environment so just assume localhost\nvar authUrl = \"https://platypuss.net\"; // Authentication server, you shouldn't have to change this but it's a variable just in case\nconst emailRegexp = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/gi;\npageUrl.protocol = \"https\"; // remove this in production\n\n// thanks bryc on stack overflow ^w^\nfunction hashPassword (str, seed = 20) { // hashes things somehow\n    let h1 = 0xdeadbeef ^ seed, // had to be something\n    h2 = 0x41c6ce57 ^ seed;\n    for (let i = 0, ch; i < str.length; i++) {\n        ch = str.charCodeAt(i);\n        // Math.imul multiplies without loss of precision\n        h1 = Math.imul(h1 ^ ch, 2654435761);\n        h2 = Math.imul(h2 ^ ch, 1597334677);\n    }\n    \n    h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n    h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n\n    return (h2>>>0).toString(16).padStart(8,0)+(h1>>>0).toString(16).padStart(8,0);\n};\n\n// Fetch data on one user, from cache if possible but from the authentication server otherwise\nfunction fetchUser(id) {\n  return new Promise((resolve, reject) => {\n    if (userCache[id] == undefined) {\n      // try fetch data from the authentication server\n      fetch(authUrl+'/uinfo?id='+id).then(response => {\n        // try turn the json response into an object\n        response.json().then(responseObject => {\n          userCache[id] = responseObject;\n          resolve(responseObject);\n        }).catch(()=>reject()); // if it's not valid json then reject the promise\n      }).catch(()=>reject()); // same for if we can't connect to the server for some reason\n    } else {\n      resolve(userCache[id]); // we already know about the user so don't look them up\n    }\n  });\n}\n\n// The bar on the left showing the servers you're in, also for navigation\nfunction ServersBar({shown}) {\n  return (<div className=\"sidebar\" id=\"serversBar\" style={{display: shown ? \"flex\" : \"none\"}}>\n    <img className=\"serverIcon\" src=\"\" alt=\"+\" id=\"newServerButton\"/>\n    {Object.values(states.servers).map(server => (<ServerIcon server={server}></ServerIcon>))}\n  </div>);\n}\n\n// The bar on the right showing other server members\nfunction PeersBar({shown}) {\n  return (<div className=\"sidebar\" id=\"serversBar\" style={{display: shown ? \"flex\" : \"none\"}}>\n    peers<img className=\"serverIcon material-symbols-outlined\" src=\"\" alt=\"+\" id=\"newServerButton\"/>\n  </div>);\n}\n\n// Renders a single message\nfunction Message({message}) {\n  // We might have the author cached already, if not we'll just get them later\n  let [author, setAuthor] = React.useState(userCache[message.author] || {\n    avatar: \"https://img.freepik.com/premium-vector/hand-drawn-cartoon-doodle-skull-funny-cartoon-skull-isolated-white-background_217204-944.jpg\",\n    username: \"Deleted User\"\n  });\n  fetchUser(message.author).then(newAuthor=>{setAuthor(newAuthor)});\n  return (<div className=\"message1\">\n    <img src={author.avatar} alt=\"\" className=\"avatar\"/>\n    <div className=\"message2\">\n      <h3 className=\"messageUsernameDisplay\">{author.username}</h3>\n      <p>{message.content.toString()}</p>\n    </div>\n  </div>);\n}\n\n// The midsection between these two aforementioned bars\nfunction MiddleSection({shown}) {\n  return (<div id=\"middleSection\" style={{display: shown ? \"flex\" : \"none\"}}>\n    <div id=\"aboveScrolledArea\"></div>\n    <div id=\"scrolledArea\"> {/* Has a scrollbar, contains load more messages button but not message typing box */}\n      <div id=\"aboveMessageArea\"></div>\n      <div id=\"messageArea\">{Object.values(states.focusedRoomRenderedMessages).map(message => <Message message={message}/>)}</div>\n      <div id=\"belowMessageArea\"></div>\n    </div>\n    <div style={{height:5,background:\"linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.3))\"}}></div>\n    <div id=\"belowScrolledArea\">\n      <div contentEditable id=\"messageBox\"></div>\n      <button>upload</button>\n      <button>send</button>\n    </div>\n  </div>);\n}\n\n// a server icon button thing\nfunction ServerIcon({server}) {\n  [server.manifest, server.setManifest] = React.useState({\n    icon: \"\",\n    title: \"Couldn't connect to this server 🐙\"\n  });\n  console.log(server);\n  return (<div className=\"popoverContainer\">\n    <img className=\"serverIcon\" src={server.manifest.icon} alt=\"🐙\" onClick={()=>{\n      states.setFocusedServer(server.serverCode);\n      loadView(server.serverCode);\n    }}/>\n    <div className=\"serverIconPopover\">{server.manifest.title}</div>\n  </div>);\n}\n\n// a comment\nfunction RoomLink({room}) {\n  return (<div className=\"roomLink\" style={{cursor:\"pointer\"}}>\n    <a>{room.name}</a>\n  </div>);\n}\n\n// A SLIGHTLY DIFFERENT COMMENT\nfunction RoomsBar({shown}) {\n  return (<div className=\"sidebar\" id=\"roomsBar\" style={{display: shown ? \"flex\" : \"none\"}}>\n    <div id=\"serverTitle\" style={{cursor: \"pointer\", backgroundImage: states.focusedServer ? states.servers[states.focusedServer].manifest.icon : \"\"}}>\n    <h3 style={{margin: 5}}>\n      {states.focusedServer ? states.servers[states.focusedServer].manifest.title : \"Loading servers...\"}\n    </h3>\n    <div style={{flexGrow: 1}}></div>\n    <span className=\"material-symbols-outlined\">stat_minus_1</span></div>\n    {Object.values(states.focusedServerRenderedRooms).map(room => (<RoomLink server={room}></RoomLink>))}\n    {Object.values(states.focusedServerRenderedRooms).length == 0 ? <p>This server doesn't have any rooms in it.</p> : <></>}\n  </div>);\n}\n\n// The document head contains metadata, most of it is defined in use-site-metadata.jsx\nexport const Head = () => (\n  <title>(Beta!) Platypuss</title>\n);\n\nasync function loadView(switchToServer) {\n  // don't try load the client as part of the page compiling\n  if (!browser) return;\n  // delete all messages\n  states.setFocusedRoomRenderedMessages({});\n  // connect to the authentication server to get the list of server's we're in and their session tokens\n  fetch(`${authUrl}/getServerTokens?id=${localStorage.getItem(\"sessionID\")}`).then(data => data.json()).then(async function(data) {\n    for (let socket of Object.values(openSockets)) {\n      socket.close();\n    }\n    for (let serverName in data.servers) { // this for loop lets us keep the same server focused between reloads\n      serverHashes[serverName] = hashPassword(serverName); // it's not a password but who cares\n      if (window.location.toString().replace(/^.*\\#/g, \"\") == serverHashes[serverName] && !switchToServer) {\n        console.log(\"focusing a server\");\n        states.setFocusedServer(serverName);\n      }\n    }\n    let servers = {};\n    for (let serverCode in data.servers) {\n      let splitServerCode = serverCode.split(' '); // take the data the authentication server gives us about the server and use it to connect\n      let ip = splitServerCode[0];\n      let inviteCode = splitServerCode[1];\n      let subserver = splitServerCode[2];\n      servers[serverCode] = { // add this server to our list of servers, making an icon\n        ip: ip,\n        serverCode: serverCode,\n        inviteCode: inviteCode,\n        subserver: subserver,\n        manifest: { // we haven't actually heard from the server itself what its icon, name etc are\n          title: \"Loading\",\n          icon: \"/icon.png\",\n          memberCount: 0,\n          public: false,\n          description: \"Waiting for a response from the server\"\n        }\n      };\n      // get this information from the server\n      fetch(pageUrl.protocol + \"//\"+ip+\"/\"+subserver).then(response => response.json()).then(serverManifest => {\n        servers[serverCode].setManifest(serverManifest);\n      }).catch(error => {console.log(error)});\n      // Open a socket connection with the server\n      let socket = new WebSocket((pageUrl.protocol == \"https:\" ? \"wss:\" : \"ws\") + \"//\" + ip);\n\n      socket.onerror = () => {\n        // The server's disconnected, in which case if we're focusing on it we should focus on a different server\n        console.error(`Warning: couldn't connect to ${ip}, try check your internet connection or inform the owner(s) of the server.`);\n        if (states.focusedServer == serverCode) {\n          // window.location.reload();\n        }\n      };\n\n      socket.onopen = () => { // Send a login packet to the server once the connection is made\n        openSockets[serverCode] = socket;\n        socket.send(JSON.stringify({\n          eventType: \"login\",\n          subserver: subserver,\n          inviteCode: inviteCode,\n          sessionID: data.servers[serverCode]\n        }));\n        if (!states.servers[states.focusedServer]) {\n          console.log(switchToServer, states.servers);\n          if (states.servers[switchToServer]) {\n            states.setFocusedServer(switchToServer);\n          } else {\n            console.log(\"focusing a server\");\n            states.setFocusedServer(serverCode);\n          }\n        }\n      };\n\n      socket.onclose = () => {\n        // same as onerror above\n        console.error(`Warning, the server at ${ip} closed.`);\n        if (states.focusedServer == serverCode) {\n          // window.location.reload();\n        }\n      };\n\n      socket.onmessage = async event => {\n        let packet = JSON.parse(event.data);\n        let renderedMessages;\n        switch (packet.eventType) {\n          case \"message\":\n            if (states.focusedServer !== serverCode) break;\n            renderedMessages = {...states.focusedRoomRenderedMessages};\n            renderedMessages[packet.message.id] = packet.message;\n            states.setFocusedRoomRenderedMessages(renderedMessages);\n            break;\n          case \"messages\":\n            if (states.focusedServer !== serverCode) break;\n            renderedMessages = {...states.focusedRoomRenderedMessages};\n            for (let message of packet.messages) {\n              renderedMessages[message.id] = message;\n            }\n            states.setFocusedRoomRenderedMessages(renderedMessages);\n            break;\n        }\n      };\n    }\n    // update our list of servers and if no server is currently focused pick the first one\n    states.setServers(servers);\n  }).catch(error => console.log(error));\n}\n\n// The page itself\nexport default function ChatPage() {\n  // set a bunch of empty React state objects for stuff that needs to be accessed throughout the program\n  [states.servers, states.setServers] = React.useState({}); // Data related to servers the user is in\n  [states.focusedRoomRenderedMessages, states.setFocusedRoomRenderedMessages] = React.useState({}); // The <Message/> elements shown in the view, set in ChatPage\n  [states.focusedServer, states.setFocusedServer] = React.useState(null); // An object representing the currently focused server\n  [states.focusedRoom, states.setFocusedRoom] = React.useState({}); // An object representing the currently focused room\n  [states.focusedServerRenderedRooms, states.setFocusedServerRenderedRooms] = React.useState({}); // The <RoomLink/> elements in the sidebar for this server\n  [states.mobileSidebarShown, states.setMobileSidebarShown] = React.useState(true); // whether to show the sidebar on mobile devices, is open by default when you load the page\n  [states.useMobileUI, states.setUseMobileUI] = React.useState(browser ? (window.innerWidth * 2.54 / 96) < 20 : false); // Use mobile UI if the screen is less than 20cm wide\n\n  // respond to changes in screen width\n  if (browser)\n  window.addEventListener(\"resize\", () => {\n    states.setUseMobileUI(browser ? (window.innerWidth * 2.54 / 96) < 20 : false);\n  });\n\n  if (!states.populated) loadView();\n  states.populated = true;\n  // return the basic page layout\n  return (<>\n    <Common.PageHeader iconClickEvent={() => {\n      if (states.useMobileUI) {\n        states.setMobileSidebarShown(!states.mobileSidebarShown);\n      } else {\n        window.location = \"/\";\n      }\n    }}/>\n    <main>\n      <div id=\"chatPage\">\n        <ServersBar shown={states.mobileSidebarShown || !states.useMobileUI}/>\n        <RoomsBar shown={states.mobileSidebarShown || !states.useMobileUI}/>\n        <MiddleSection shown={!states.mobileSidebarShown || !states.useMobileUI}/>\n        <PeersBar shown={states.mobileSidebarShown || !states.useMobileUI}/>\n      </div>\n    </main>\n  </>);\n}\n"],"names":["PageHeader","title","iconClickEvent","React","onClick","window","location","style","cursor","src","userCache","states","populated","openSockets","serverHashes","browser","pageUrl","URL","authUrl","hashPassword","str","seed","h1","h2","ch","i","length","charCodeAt","Math","imul","toString","padStart","ServersBar","shown","className","id","display","alt","Object","values","servers","map","server","ServerIcon","PeersBar","Message","message","author","setAuthor","avatar","username","Promise","resolve","reject","undefined","fetch","then","response","json","responseObject","catch","newAuthor","content","MiddleSection","focusedRoomRenderedMessages","height","background","contentEditable","manifest","setManifest","icon","console","log","setFocusedServer","serverCode","loadView","RoomLink","room","name","RoomsBar","backgroundImage","focusedServer","margin","flexGrow","focusedServerRenderedRooms","protocol","Head","async","switchToServer","setFocusedRoomRenderedMessages","localStorage","getItem","data","socket","close","serverName","replace","splitServerCode","split","ip","inviteCode","subserver","memberCount","public","description","serverManifest","error","WebSocket","onerror","onopen","send","JSON","stringify","eventType","sessionID","onclose","onmessage","renderedMessages","packet","parse","event","messages","setServers","ChatPage","focusedRoom","setFocusedRoom","setFocusedServerRenderedRooms","mobileSidebarShown","setMobileSidebarShown","useMobileUI","setUseMobileUI","innerWidth","addEventListener","Common"],"sourceRoot":""}